{"ast":null,"code":"var _jsxFileName = \"H:\\\\VolontirajReact2\\\\VolontirajReact2\\\\Volont\\\\my-app\\\\src\\\\components\\\\Feed.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Post from './Post';\nimport { usePosts } from '../PostContext';\nimport { useEffect } from 'react';\nimport './Feed.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  timeout: 5000\n});\nconst Feed = () => {\n  _s();\n  const token = localStorage.getItem(\"loginToken\");\n  const {\n    posts,\n    addPost,\n    removeAllPosts\n  } = usePosts(); // Retrieve posts from context\n  const [isOrg, setIsOrg] = useState(0);\n\n  // get posts\n\n  const loadPosts = async () => {\n    try {\n      try {\n        const response = await api.get('/posts/1'); // OVDE DA SE MENJA OVAJ BROJ NA OSNOVU STRANICE FEED-A NA KOJOJ JE KORISNIK U TOM TRENUTKU --------------------------------\n        console.log('Load feed response:', response.data.length);\n        removeAllPosts();\n        for (let i = 0; i < response.data.length; i++) await addPost(response.data[i]); // Assuming addPost returns a promise\n      } catch (err) {\n        console.error('Load feed error:', err);\n        alert('Load feed error');\n      }\n    } catch (err) {\n      alert('Error loading feed'); // Show an error message\n    }\n  };\n  const orgCheck = async () => {\n    try {\n      const authStr = \"Bearer \".concat(token);\n      const response = await api.get('/admincheck', {\n        headers: {\n          Authorization: authStr\n        }\n      });\n      setIsOrg(response.data.isOrg);\n    } catch (err) {\n      console.log(\"error trying to get response for org check\");\n    }\n  };\n\n  // use addPost to add them to the posts list\n  // don't forget to remove addPost from PostForm.js\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await loadPosts();\n      await orgCheck();\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: [posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-item\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/post/${post._id}`,\n        className: \"post-link\",\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          title: post.title,\n          date: post.date,\n          description: post.description,\n          photo: post.photo // Ensure this is a URL or base64 string\n          ,\n          participants: post.participants\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No posts available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), isOrg === 1 ? /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/post-form\",\n      className: \"button\",\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(Feed, \"tthM4WAmrQI22SkmnCv3VRKp+ug=\", false, function () {\n  return [usePosts];\n});\n_c = Feed;\nexport default Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useState","Link","Post","usePosts","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","api","create","baseURL","timeout","Feed","_s","token","localStorage","getItem","posts","addPost","removeAllPosts","isOrg","setIsOrg","loadPosts","response","get","console","log","data","length","i","err","error","alert","orgCheck","authStr","concat","headers","Authorization","fetchData","className","children","map","post","to","_id","title","date","description","photo","participants","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["H:/VolontirajReact2/VolontirajReact2/Volont/my-app/src/components/Feed.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Post from './Post';\r\nimport { usePosts } from '../PostContext';\r\nimport { useEffect } from 'react';\r\nimport './Feed.css';\r\nimport axios from 'axios';\r\n\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n  timeout: 5000,\r\n});\r\n\r\n\r\nconst Feed = () => {\r\n  const token = localStorage.getItem(\"loginToken\");\r\n  const { posts, addPost, removeAllPosts } = usePosts(); // Retrieve posts from context\r\n  const [ isOrg, setIsOrg ] = useState(0);\r\n\r\n  // get posts\r\n\r\n  const loadPosts = async () => {\r\n    try {\r\n      try {\r\n        const response = await api.get('/posts/1');  // OVDE DA SE MENJA OVAJ BROJ NA OSNOVU STRANICE FEED-A NA KOJOJ JE KORISNIK U TOM TRENUTKU --------------------------------\r\n        console.log('Load feed response:', response.data.length);\r\n        removeAllPosts();\r\n        for (let i = 0; i < response.data.length; i++)\r\n          await addPost(response.data[i]); // Assuming addPost returns a promise\r\n      } catch (err) {\r\n        console.error('Load feed error:', err);\r\n        alert('Load feed error');\r\n      }\r\n    } catch (err) {\r\n      alert('Error loading feed'); // Show an error message\r\n    }\r\n  };\r\n\r\n  const orgCheck = async () => {\r\n    try {\r\n      const authStr = \"Bearer \".concat(token);\r\n      const response = await api.get('/admincheck', {headers: {Authorization: authStr}});\r\n      setIsOrg(response.data.isOrg);\r\n    } catch (err) {\r\n      console.log(\"error trying to get response for org check\");\r\n    }\r\n  };\r\n\r\n  // use addPost to add them to the posts list\r\n  // don't forget to remove addPost from PostForm.js\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await loadPosts();\r\n      await orgCheck();\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"feed\">\r\n      {posts.length > 0 ? (\r\n        posts.map((post) => (\r\n          <div key={post._id} className=\"post-item\">\r\n            <Link to={`/post/${post._id}`} className=\"post-link\">\r\n              <Post\r\n                title={post.title}\r\n                date={post.date}\r\n                description={post.description}\r\n                photo={post.photo} // Ensure this is a URL or base64 string\r\n                participants={post.participants}\r\n              />\r\n            </Link>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>No posts available.</p>\r\n      )}\r\n      {isOrg === 1 ? (<Link to=\"/post-form\" className=\"button\">+</Link>) : <></>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Feed;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}